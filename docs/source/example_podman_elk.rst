Example Deployment for ELK using Podman
=======================================

Example how to deploy a small Kibana instance for ELK using Podman.

Getting Started
---------------

``cd`` into ``elastic-kibana-pod/deployment/examples/``:

.. code-block:: bash

    cd elastic-kibana-pod/deployment/examples/

Build our Kibana image:

.. code-block:: bash

    podman build -t extra2000/elastic/kibana -f Dockerfile.amd64 .

Create ``elknet`` podman network from ``elastic-elasticsearch-pod`` project.

Get CA from ``elastic-elasticsearch-pod`` Project
-------------------------------------------------

``cd`` into ``elastic-kibana-pod/deployment/``:

.. code-block:: bash

    cd elastic-kibana-pod/deployment/examples

Then, get CA certificate from ``_global_secrets_`` and ``es-coord-01`` instance:

.. code-block:: bash

    cp -v /path/to/elastic-elasticsearch-pod/deployment/_global_secrets_/elastic-ca.p12 ./secrets/
    cp -v /path/to/elastic-elasticsearch-pod/deployment/examples/cluster/es-coord-01/secrets/elasticsearch-ssl-http/kibana/elasticsearch-ca.pem ./secrets/elastic-ca.pem

Prerequisites for ``kibana-01``
-------------------------------

``cd`` into ``elastic-kibana-pod/deployment/examples/podman-elk``:

.. code-block:: bash

    cd elastic-kibana-pod/deployment/examples/podman-elk

Create Config Files
~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    cp -v configmaps/kibana-01.yaml{.example,}
    cp -v configs/kibana-01.yml{.example,}

Creating HTTP Certificate
~~~~~~~~~~~~~~~~~~~~~~~~~

Ensure the ``./secrets`` directory is labeled as ``container_file_t``:

.. code-block:: bash

    chcon -R -v -t container_file_t ./secrets

Create HTTP certificate:

.. code-block:: bash

    podman run -it --network none --rm -v ./secrets:/tmp/secrets:rw localhost/extra2000/elastic/elasticsearch ./bin/elasticsearch-certutil cert --ca /tmp/secrets/elastic-ca.p12 --multiple

.. list-table:: Questions and answers for creating ``kibana-01``'s ``certificate-bundle.zip``
   :widths: 50 50
   :header-rows: 1

   * - Question
     - Answer
   * - Enter password for CA (``/tmp/secrets/elastic-ca.p12``)
     - ``abcde12345``
   * - Enter instance name
     - ``kibana-01``
   * - Enter name for directories and files of ``kibana-01``
     - ``kibana-01``
   * - Enter IP Addresses for instance
     - ``127.0.0.1``
   * - Enter DNS names for instance
     - ``elk-kibana-01.elknet``, ``kibana-01.yourhostname.lan``, ``localhost``
   * - Would you like to specify another instance?
     - ``n``
   * - Please enter the desired output file
     - ``/tmp/secrets/certificate-bundle.zip``
   * - Enter password for ``kibana-01/kibana-01.p12``
     - ``abcde12345``

Extract the certificate archive:

.. code-block:: bash

    unzip ./secrets/certificate-bundle.zip -d ./secrets/certificate-bundle

Creating Keystore
~~~~~~~~~~~~~~~~~

Create ``./secrets/kibana-01-pod.keystore`` file to store certificate passwords:

.. code-block:: bash

    podman run -it --rm -v ./secrets:/tmp/secrets:rw --user root --entrypoint bash localhost/extra2000/elastic/kibana
    ./bin/kibana-keystore create
    ./bin/kibana-keystore add server.ssl.keystore.password
    openssl rand -hex 32 | ./bin/kibana-keystore add xpack.encryptedSavedObjects.encryptionKey
    openssl rand -hex 32 | ./bin/kibana-keystore add xpack.security.encryptionKey
    openssl rand -hex 32 | ./bin/kibana-keystore add xpack.reporting.encryptionKey
    cp -v /usr/share/kibana/config/kibana.keystore /tmp/secrets/kibana-01.keystore

.. note::

    The ``openssl rand -hex 32`` is a trick to generate random string.

Load SELinux Security Policy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    sudo semodule -i selinux/elk_kibana_01_pod_kibana_01.cil /usr/share/udica/templates/{base_container.cil,net_container.cil}

Verify that the SELinux module exists:

.. code-block:: bash

    sudo semodule --list | grep -e "elk_kibana_01_pod_kibana_01"

Deployment
----------

Import ``./secrets/elastic-ca.pem`` into your web-browser certificate authority.

.. note::

    On your web-browser (Firefox), the certificate name ``./secrets/elastic-ca.pem`` will be known as "Elastic Certificate Tool Autogenerated CA".

Deploy ``kibana-01``
~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    podman play kube --network elknet --configmap configmaps/kibana-01.yaml --seccomp-profile-root ./seccomp elk-kibana-01-pod.yaml

Kibana is now accessible at https://127.0.0.1:5601. Login with username ``elastic`` and password ``abcde12345``.

Create Snapshots
----------------

Go to https://127.0.0.1:5601/app/management/data/snapshot_restore/snapshots and ``Register a repository``.

* Repository name: minio-repo
* Repository type: AWS S3
* Client: default
* Bucket: elasticsearch
* Basepath:
* Chunksize:
* Server-side encryption: no
* Buffer size:
* Canned ACL: private
* Storage class: standard
* Max snapshot bytes per second:
* Max restore bytes per second:
* Read-only: no

.. note::

    At MinIO web console, you have to manually create a bucket named ``elasticsearch``.
